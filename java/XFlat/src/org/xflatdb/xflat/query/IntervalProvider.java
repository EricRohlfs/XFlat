/* 
*	Copyright 2013 Gordon Burgett and individual contributors
*
*	Licensed under the Apache License, Version 2.0 (the "License");
*	you may not use this file except in compliance with the License.
*	You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
*	Unless required by applicable law or agreed to in writing, software
*	distributed under the License is distributed on an "AS IS" BASIS,
*	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*	See the License for the specific language governing permissions and
*	limitations under the License.
*/
package org.xflatdb.xflat.query;

import java.util.Comparator;
import org.xflatdb.xflat.convert.Converter;
import org.jdom2.Element;

/**
 *
 * @author Gordon
 */
public interface IntervalProvider<T> {
    
    /**
     * Gets the range that contains the given value.
     * @param value The value for which a range is needed.
     * @return The range for that value.
     */
    public Interval<T> getInterval(T value);
    
    /**
     * Gets another range, which is a number of ranges away from the 
     * given range.
     * <p/>
     * For instance, on an integer range provider, if the current range is
     * [0, 10) and the factor is 1, the nextRange is [10, 20).<br/>
     * If the factor is -2, the nextRange is [-20, -10).
     * @param currentInterval The base range
     * @param factor The number of ranges to skip.
     * @return A new range that is factor ranges away from currentRange.
     */
    public Interval<T> nextInterval(Interval<T> currentInterval, long factor);
    
    /**
     * Returns a comparator that can compare the values provided by this range.
     * @return 
     */
    public Comparator<T> getComparator();
    
    /**
     * Gets a unique name for this interval.  This name should be unique
     * within the intervals provided by this IntervalProvider.  This will
     * be used by sharded engines to name shard files, and so cannot contain any
     * illegal file path characters.
     * @param interval The interval for which a unique name is needed.
     * @return The unique name of the interval, not containing any illegal file characters.
     */
    public String getName(Interval<T> interval);
    
    /**
     * Gets an interval from the interval's unique name.
     * Since the name is unique it should reliably map to an interval.
     * If the name is unparseable or cannot be mapped to an interval, null should
     * be returned instead of throwing an exception.
     * @param name The interval's unique name, generated by {@link #getName(org.xflatdb.xflat.query.Interval) }
     * @return The interval for the given unique name.
     */
    public Interval<T> getInterval(String name);
}
